<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article>
  <articleinfo>
    <title>WebDyne Installation and Usage Guide</title>

    <author>
      <firstname>Andrew</firstname>

      <surname>Speer</surname>

      <affiliation>
        <address><email>andrew.speer@webdyne.org</email></address>
      </affiliation>
    </author>

    <copyright>
      <year>2003-2009</year>

      <holder role="mailto:andrew.speer@isolutions.com.au">Andrew
      Speer</holder>
    </copyright>

    <abstract>
      <para>This article describes how to install and use the WebDyne
      mod_perl/FastCGI dynamic content engine.</para>
    </abstract>
  </articleinfo>

  <sect1>
    <title>Introduction</title>

    <para>WebDyne is a mod_perl/FastCGI based HTML dynamic content engine. It
    allows for realtime generation of HTML documents using Perl code and/or
    modules. It can potentially make small projects more readable and large
    projects more manageable.</para>

    <para>Once WebDyne is installed any file with a <filename>.psp</filename>
    extension is treated as a WebDyne source file. It is parsed for WebDyne
    specific tags (such as &lt;perl&gt; and &lt;block&gt;) which are
    interpreted and executed on the server as appropriate. The resulting
    output is then sent to the browser. Once pages are parsed once they are
    optionally stored in a partially compiled format, speeding up subsequent
    processing.</para>

    <para>The aim of WebDyne is to make coding web pages with Perl components
    a faster, easier and more maintainable experience. You can be the judge of
    whether it succeeds in that aim by examining the <link
    linkend="examples">examples</link> below and trying it out for
    yourself.</para>
  </sect1>

  <sect1>
    <title>Legal Information - Licensing and Copyright</title>

    <para>WebDyne is Copyright © Andrew Speer 2005-2009. Webdyne is dual
    licensed. It is released as free software released under the <link
    linkend="gpl">Gnu Public License (GPL)</link>, but is also available for
    commercial use under a proprietary license - please contact the author for
    further information.</para>

    <para>WebDyne is written in Perl and uses modules from <ulink
    url="http://www.cpan.org">CPAN</ulink> (the Comprehensive Perl Archive
    Network). CPAN modules are Copyright © the owner/author, and are available
    in source form by downloading the "Source Code" version of WebDyne or from
    CPAN directly. All CPAN modules used are covered by the <ulink
    url="http://www.perl.com/pub/a/language/misc/Artistic.html">Perl Artistic
    License</ulink></para>
  </sect1>

  <sect1>
    <title>Credits</title>

    <para>WebDyne relies heavily on modules and code developed and
    open-sourced by other authors. Without Perl, and Perl modules such as
    mod_perl/FCGI, CGI.pm, HTML::TreeBuilder and Storable, WebDyne would not
    be possible. To the authors of those modules - and all the other modules
    used to a lesser extent by WebDyne - I convey my thanks.</para>
  </sect1>

  <sect1>
    <title>Installation</title>

    <para>WebDyne can be installed via the following methods:</para>

    <variablelist>
      <varlistentry>
        <term>Perl CPAN</term>

        <listitem>
          <para>Install from the Perl CPAN library. Installs dependencies if
          required (also via CPAN). Use this method if you are familiar with
          CPAN. Destination of the installated files is dependent on the local
          CPAN configuration, however in most cases it wil be to the Perl site
          library location. WebDyne supports installation to an alternate
          location using the PREFIX option in CPAN. Binaries are usually
          installed to <filename>/usr/bin</filename> by CPAN, but may vary by
          distribution/local configuration.</para>

          <para>Assuming your CPAN environment is setup correctly you can run
          the command:</para>

          <para><command>perl -MCPAN -e "install WebDyne"</command></para>

          <para>To install the base WebDyne module, which includes the Apache
          installer.</para>

          <para>To get the installer for Lighttpd (after the base package
          above is installed) run</para>

          <para><command>perl -MCPAN -e "install
          WebDyne::Install::Lighttpd"</command></para>

          <para>To get the complete suite of WebDyne modules, including all
          installers and externsion modules (Session manager etc.) run:</para>

          <para><command>perl -MCPAN -e "install
          Bundle::WebDyne"</command></para>
        </listitem>
      </varlistentry>

      <!--<varlistentry
><term
>Distribution packages</term
><listitem
><para
>Pre-compiled binary packages (including all dependencies) are available for selected of Linux distributions. Packages install to <filename
>/opt/webdyne</filename
> by default, binaries are located in <filename
>/opt/webdyne/bin</filename
></para
></listitem
></varlistentry
><varlistentry
><term
>Source code package</term
><listitem
><para
>Installation from source (including all dependencies) is available when there are no pre-compiled packages suitable for your distribution. Installation from source requires that a functioning compiler tool chain (and all required development libraries) are in place. Destination of installed files is dictated by the PREFIX option chosen during the installtion (see relevant section below), or <filename
>/usr</filename
> if no PREFIX is given.</para
></listitem
></varlistentry
>-->
    </variablelist>

    <important>
      <para>WebDyne must be initialised after installation. To get started
      quickly run <command>wdapacheinit</command> after CPAN installation to
      setup WebDyne for an Apache/mod_perl environment, or
      <command>wdlighttpdinit</command> for a Lighttpd/FastCGI environment
      (make sure the Lighttpd FastCGI module is installed - it is often
      packaged as a separate component in many Linux distributions). See the
      <link lang="" linkend="sect1-initialisation">initialisation</link>
      section for more information<!--, or <command
>wdlighttpdinit</command
> for a Lighttpd/FastCGI environment. For Windows no additional steps are needed - the installer will take care of initialization. If installing via CPAN you will need to download the WebDyne::Install module to get the installer files.--></para>
    </important>

    <sect2>
      <title>Prerequisites</title>

      <para>WebDyne requires mod_perl available when running with Apache, or
      FastCGI support if running with Lighttpd. Installation on Windows
      requires ActiveState Perl be installed, and <!--IIS or -->Apache be
      available. Installation with the Strawberry Perl distribition should
      work, but has not been tested (feedback welcome).</para>

      <para>In pathological cases WebDyne can run in CGI mode (does not need
      mod_perl or FastCGI) however such a configuration is not supported by
      the installation scripts, and would be extremely inefficient and CPU
      intensive under any non-trivial load.</para>
    </sect2>

    <sect2>
      <title>Compatibility</title>

      <para>WebDyne should install on any modern Linux distribution. It will
      run with mod_perl 1.x, 1.99_x, 2.0.x and 2.2, and has been tested on a
      variety of distributions.</para>

      <para>Installation from CPAN or the source code should be possible with
      little or no effort on most *nix/compatible systems such a *BSD, Solaris
      etc. so long as the correct development tools and libraries are
      available.</para>

      <para>WebDyne has been installed onto a Windows 2003 SP1 server running
      Apache 2.0/mod_perl, Apache 2.2/mod_perl and IIS. The installer may work
      in other Windows environments but has not been tested.</para>
    </sect2>

    <!--<sect2
><title
>Perl CPAN</title
><para
>Install from the Perl CPAN library using the following command:</para
><screen
>[root@localhost ~]#perl -MCPAN -e 'install WebDyne'
</screen
><para
>The Perl CPAN installer will install WebDyne and should prompt for dependency installation if required. The base WebDyne module does not include the <command
>wdapacheinit</command
> or <command
>wdlighttpdinit</command
> commands - to obtain them install the WebDyne::Install package:</para
><screen
>[root@localhost ~]#perl -MCPAN -e 'install WebDyne::Install'
</screen
><para
>Alternatively you can manually configure your Web server to using the instuctions in Initialisation section.</para
></sect2
>-->

    <!--<sect2
><title
>Distribution specific RPM packages</title
><para
>Binary packages suitable for several popular distributions that use Redhat Package Manager (RPM) for software installation are available. Download a package appropriate for your distribution from the <ulink
url="http://proxcube.com/download/webdyne.psp"
>download directory</ulink
>.</para
><para
>Install using the <command
>rpm</command
> command or GUI equivalent. <screen
>[root@localhost ~]# <command
>rpm -Uvh Bundle-WebDyne-Dist-1.10-1.fedora.3.heidelberg.i386.rpm</command
>
</screen
></para
><para
>Substitute the RPM file name above for the one suited to your distribution.</para
><para
>If a suitable binary package is not available for your distribution you may be able to make one by rebuilding the source RPM package</para
><para
><screen
>[root@localhost ~]# <command
>rpmbuild - -rebuild Bundle-WebDyne-Dist-1.10-1.src.rpm</command
>
</screen
>However for this to work successfully you will need to meet all the pre-requisites needed when building the normal source code package (see below).</para
><para
>Once completed you must run the <command
>wdapacheinit</command
> or <command
>wdlighttpdinit</command
> command to initialize the application (see below).</para
></sect2
><sect2
><title
>Source code bundle packages</title
><para
>The source code bundle package contains all WebDyne modules and all required modules (dependencies) in one frozen tarball suitable for installation.</para
><para
>Download the latest source code package from the WebDyne <ulink
url="http://proxcube.com/download/webdyne.psp"
>download directory</ulink
>.</para
><para
>Installation from source requires a full complement of development tools including:</para
><itemizedlist
><listitem
><para
>GCC compiler and associated tool chain, including the <command
>patch</command
> utility.</para
></listitem
><listitem
><para
>db4 development libraries</para
></listitem
></itemizedlist
><para
>Unpack the source distribution and start the build process <screen
>
[root@localhost ~]# <command
>tar -xvzf Bundle-WebDyne-Dist-1.10.tar.gz</command
>
[root@localhost ~]# <command
>cd Bundle-WebDyne-Dist-1.10</command
>
[root@silicon Bundle-WebDyne-Dust-1.10]# <command
>perl Makefile.PL</command
>
Checking if your kit is complete...
Looks good
Writing Makefile for Bundle::WebDyne::Dist
[root@silicon Bundle-WebDyne-Dist-1.10]# <command
>make install PREFIX=/opt/webdyne</command
>

</screen
></para
><para
>The installer will now extract all the necessary files and compare software package versions against installed versions (if any).</para
><important
><para
>The <command
>PREFIX=</command
> component of the last command tells the installer in which directory the software should be located. If no <command
>PREFIX</command
> is given the installer will assume you want to upgrade Perl system packages. Consequently the installer will <emphasis
>overwrite</emphasis
> system installed Perl packages if they are a lower version than is required.</para
></important
><para
>The installer will then list the names and versions of all Perl modules to be installed. <screen
>
This distribution contains the following bundles and modules:

[Bundle::WebDyne::Dist]                                [1.21 -&gt; 1.22]*
 Digest::base                                          [1.00 - OK]
 Net::FTP                                              [2.75 - OK]
 URI                                                   [1.35 - OK]
    [Bundle::LWP]                                      [1.11 - OK]
     MIME::Base64                                      [3.05 - OK]
     Digest::MD5                                       [2.30 -&gt; 2.33]*
     URI                                               [1.35 - OK]
     ...
[End]

Modules marked with an asterisk(*) will be installed or upgraded.
Do you wish to continue (yes|all|quit) ?  [yes] 

</screen
></para
><para
>Follow the prompts and allow the installer to load the Perl modules required. At completion the installer will summarise the success or failure of the installation.</para
><para
>Most problems result from the failure to compile a Perl module because a required development library (e.g. The db4 development library needed by BerkeleyDB) is not installed. If errors occur ensure that all supporting libraries for the failing Perl module are installed and try again.</para
><para
>Once completed you must run the <command
>wdapacheinit</command
> (or similar, e.g. wdlighttpdinit) command to initialize the application (see below) - or configure your Web server to use WebDyne manually using the manual initialisation instructions.</para
></sect2
>-->
  </sect1>

  <sect1 id="sect1-initialisation">
    <title>Initialisation</title>

    <para>After installation Web Server configuration files must be updated so
    that the WebDyne software will be used to generate output when a psp file
    is invoked.</para>

    <para>Initialisation can be done via one of two methods:</para>

    <variablelist>
      <varlistentry>
        <term>Manual Initialisation</term>

        <listitem>
          <para>Web server configuration files can be hand-edited, and cache
          directories manualy created.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Script Initialisation</term>

        <listitem>
          <para>Scripts to automate the initialisation process for Apache and
          Lighttpd have been written - they will attempt to locate and update
          the Web Server config files (and create neccessary directories, set
          permissions etc.) as required. The scripts will work in common
          cases, but may have trouble on unusual distributions, or if a custom
          version of Apache (or other Web Server) is being used</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Scripted installation is easiest if it works for your distribution -
    it will take care of all configuration file changes, directory permissions
    and ownership etc.</para>

    <sect2>
      <title>Running <command>wdapacheinit</command> to initialise the
      software for use with Apache/mod_perl</title>

      <para>Once the WebDyne software in installed it must be initialized. The
      <command>wdapacheinit</command> command must be run to update the Apache
      configuration files so that WebDyne pages will be correctly
      interpreted:</para>

      <para><screen>
[root@localhost ~]# <command>/opt/webdyne/bin/wdapacheinit</command>

[install] - Installation source directory '/opt/webdyne'.
[install] - Using existing cache directory '/opt/webdyne/cache'.
[install] - Updating perl5lib config.
[install] - Writing Apache config file '/etc/httpd/conf.d/webdyne.conf'.
[install] - Granting Apache write access to cache directory.
[install] - Install completed.

</screen></para>

      <para>By default WebDyne will create a cache directory in
      <filename>/opt/webdyne/cache</filename> on Linux systems. Use the
      <option>--cache</option> command-line option to specify an alternate
      location.</para>

      <para>Once <command>wdapacheinit</command> has been run the Apache
      server should be reloaded or restarted. Use a method appropriate for
      your Linux distribution. <screen>
[root@localhost ~]# <command>service httpd restart</command>
Stopping httpd:                                            [  OK  ]
Starting httpd:                                            [  OK  ]
</screen></para>

      <para>WebDyne should be now ready for use.</para>

      <para>If the Apache service does not restart, examine the error log
      (usually <filename>/var/log/httpd/error.log</filename>) for
      details.</para>

      <para>The script will look for Apache components (binary, configuration
      directories etc.) using common defaults. In the event that the script
      gives an error indicating that it cannot find a binary, directory or
      library you may need to specify the location manually. Run the script
      with the <option>--help</option> option to determine the appropriate
      syntax.</para>
    </sect2>

    <sect2>
      <title>Manual configuration of Apache</title>

      <para>If the <command>wdapacheinit</command> command does not work on
      your system the Apache config files can be modified manually.</para>

      <para>Include the following section in the Apache httpd.conf file (or
      create a webdyne.conf file if you distribution supports conf.d style
      configuration files):</para>

      <para><screen>#  Put this in if WebDyne was installed using the PREFIX option to its own directory - replace
#  /opt/webdyne with the correct path to the perl5lib.pm library.
#
#  This will adjust the @INC path so all WebDyne modules (and modules WebDyne relies on) can be
#  located and loaded.
#
PerlRequire   "/opt/webdyne/bin/perl5lib.pm"


#  Preload the WebDyne module
#
PerlModule    WebDyne WebDyne::Compile


#  Associate psp files with WebDyne
#
AddHandler    perl-script    .psp
PerlHandler   WebDyne


#  Set a directory for storage of cache files. Make sure this exists already is writable by the 
#  Apache daemon process.
#
PerlSetVar    WEBDYNE_CACHE_DN    '/opt/webdyne/cache'


#  Allow Apache to access the cache directory if it needs to serve pre-compiled pages from there.
#
&lt;Directory "/opt/webdyne/cache"&gt;
Order allow,deny
Allow from all
Deny from none
&lt;/Directory&gt;</screen></para>

      <important>
        <para>Substitute directory paths in the above example for the
        relevant/correct/appropriate ones on your system.</para>
      </important>

      <para>Create the cache directory and assign ownership and permission
      appropriate for your distribution (group name will vary by distribution
      - locate the correct one for your distribution)</para>

      <screen>
[root@localhost ~]# <command>mkdir /opt/webdyne/cache
</command>[root@localhost ~]# <command>chgrp apache /opt/webdyne/cache
</command>[root@localhost ~]# <command>chmod 770 /opt/webdyne/cache
</command></screen>

      <para>Restart Apache and check for any errors.</para>
    </sect2>

    <sect2>
      <title>Running <command>wdlighttpdinit</command> to initialise the
      software for use with Lighttpd/FastCGI</title>

      <para>Once the WebDyne software in installed it must be initialized. The
      <command>wdlighttpdinit</command> command must be run to update the
      Lighttpd configuration files so that WebDyne pages will be correctly
      interpreted:</para>

      <important>
        <para>WebDyne depends on the Lighttpd mod_fastcgi module (on RPM
        systems the package is sometimes called lighttpd-fastcgi). Please
        ensure the it is installed before running the initialisation
        script.</para>
      </important>

      <para><screen>
[root@localhost ~]# <command>/opt/webdyne/bin/wdlighttpdinit</command>

[install] - Installation source directory '/opt/webdyne'.
[install] - Using existing cache directory '/opt/webdyne/cache'.
[install] - Updating perl5lib config.
[install] - Writing Lighttpd config file '/etc/lighttpd/webdyne.conf'.
[install] - Lighttpd config file 'lighttpd_conf_fn'
[install] - Lighttpd config file '/etc/lighttpd/lighttpd.conf' updated.
[install] - Granting Lighttpd write access to cache directory.
[install] - Install completed.

</screen></para>

      <para>Once <command>wdlighttpinit</command> has been run the Lighttpd
      server should be reloaded or restarted. Use a method appropriate for
      your Linux distribution. <screen>
[root@localhost ~]# <command>service lighttpd restart</command>
Stopping lighttpd:                                            [  OK  ]
Starting lighttpd:                                            [  OK  ]
</screen></para>

      <para>WebDyne should be now ready for use.</para>

      <para>If the Lighttpd service does not restart, examine the error log
      (usually <filename>/var/log/lighttpd/error.log</filename>) for
      details.</para>
    </sect2>

    <sect2>
      <title>Manual configuration of lighttpd</title>

      <para>If the <command>wdlighttpdinit</command> command does not work on
      your system the Lighttpd config files can be modified manually..</para>

      <para>Include the following section into the lighttpd configuration
      file:</para>

      <para><screen>#  Include the Lighttpd FastCGI module - make sure it is present on the system, install if not
#
#
server.modules += (
    "mod_fastcgi",
),


#  Register the psp extension with the FastCGI module
#
fastcgi.server = ( 

    ".psp" =&gt; ( 
        "localhost" =&gt; (

            #  Change paths as appropriate for your system, socket dir must be writable by
            #  Lighttpd daemon process owner.
            #
            "socket"           =&gt; "/opt/webdyne/cache/wdfastcgi-webdyne.sock",
            "bin-path"         =&gt; "/opt/webdyne/bin/wdfastcgi",

            #  Optional, must be writable by Lighttpd daemon process owner
            #
            "bin-environment"  =&gt; (
                "WEBDYNE_CACHE_DN"=&gt; "/opt/webdyne/cache"
            )
        )
    )
)
</screen></para>
    </sect2>

    <sect2>
      <title id="fastcgi_setup">Configuring other FastCGI servers, or systems
      where <command>wdlighttpdinit</command> is not supported.</title>

      <para>WebDyne can run as a FastCGI process. It has been tested with the
      <ulink url="http://www.lighttpd.net/">lighttpd</ulink> web server, and
      in theory should work with any web server that supports <ulink
      url="http://www.fastcgi.com/">FastCGI</ulink> applications - such as
      <ulink url="http://www.zeus.com/">the Zeus</ulink> or <ulink
      url="http://litespeedtech.com/">litespeed</ulink> servers, or even
      Apache with mod_fastcgi.</para>

      <para>Lighttpd is not avaiable for installation as a package on many
      Linux distributions at the moment. As a result the installation of
      Lighttpd may vary from system to system, and the
      <command>wdlighttpinit</command> command may not work correctly. If this
      is the case you can configure Lighttpd with the following
      instructions:</para>

      <para>The following assumes a Fedora Core environment where the lighttpd
      server runs as the "lighttpd" user - adjust as appropriate for your
      distribution and environment, or for you alternative FastCGI
      server.</para>

      <screen>
#  Download the lighttpd config file
#
[root@localhost ~]# <command>wget http://webdyne.org/documentation/example/lighttpd.conf -O /etc/lighttpd/webdyne.conf</command>

#  Edit the master lighttpd config file
#
[root@localhost ~]# <command>vi /etc/lighttpd/lighttpd.conf</command>
&lt;insert the following text at the end of the lighttpd.conf file&gt;
include "webdyne.conf"

#  Grant the lighttpd user permission to write to the cache dir
#
[root@localhost ~]# <command>chown -R lighttpd /var/webdyne/cache</command>

#  Restart lighttpd
#
[root@localhost ~]# <command>service lighttpd restart</command>
Stopping lighttp                                           [  OK  ]
Starting lighttpd:                                         [  OK  ]
</screen>

      <para>The lighttpd web server should now be ready to run .psp files
      through FastCGI.</para>
    </sect2>

    <!--<sect2
><title
>Windows Packages</title
><para
>WebDyne runs on Windows 2003 SP1 with Apache 2.0/mod_perl, Apache 2.2/mod_perl or IIS (with a FastCGI ISAPI filter written by Shane Caraveo of ActiveState).</para
><para
>Download and run the WIndows installer, then choose the target environment (IIS, Apache, or both) for WebDyne. No initialisation is required - the installer will take care of it.<important
><para
>If installing for use with IIS the installer will configure WebDyne to work with IIS sites 0 and 1 (usually the default). If you have other virtual web sites you will need to map the .psp extension manually, or run <command
>wdiisinit &lt;server id&gt;</command
> for each site.</para
></important
></para
><para
></para
></sect2
><sect2
><title
>SELinux</title
><para
>WebDyne will work with SELinux enabled. The WebDyne Apache installer will attempt to use chcon and semanage to relabel the WebDyne cache directory so that the Apache daemon can read and write files to that area.</para
><para
>If you do not use the installer you will need to manually relabel the directory with the command:</para
><para
><command
>chcon -R -t httpd_sys_content_t /opt/webdyne/cache</command
></para
><para
>Under some distributions (RHEL, Centos) you may have to relabel the entire WebDyne content area in order for it to work correctly, i.e.:</para
><para
><command
>chcon -R -t httpd_sys_content_t /opt/webdyne</command
></para
><para
>This may be neccessary even if you have used the installer !</para
></sect2
>-->
  </sect1>

  <sect1 id="examples">
    <title>Getting Started/Basic Usage</title>

    <para>Assuming the installation has completed with no errors you are now
    ready to start creating WebDyne pages and applications.</para>

    <sect2>
      <title>Basics - integrating Perl into HTML</title>

      <para>Some code fragments to give a very high-level overview of how
      WebDyne can be implemented. First the most basic usage example:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/hello1.html"</programlisting><ulink
        url="example/hello1.psp">Run</ulink></para>
      </example>

      <para>So far not too exciting - after all we are still mixing code and
      content. Lets try again:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/hello2.html"</programlisting><ulink
        url="example/hello2.psp">Run</ulink></para>
      </example>

      <para>Better - at least code and content are distinctly separated. Note
      that whatever the Perl code returns at the end of the routine is what is
      displayed. Although WebDyne will happily display returned strings or
      scalars, it is more efficient to return a scalar reference, e.g.:</para>

      <para><programlisting>#  Works
#
sub greeting { print "Hello World" }


#  Is the same as
#
sub greeting { return "Hello World }
sub greeting { my $var="Hello World"; return $var }


# But best is
#
sub greeting { my $var="Hello World"; return \$var }


# This will cause an error
#
sub greeting { return undef }


# If you don't want to display anything return \undef,
#
sub greeting { return \undef }


# This will fail also
#
sub greeting { return 0 }


#  If you want "0" to be displayed ..
#
sub greeting { return \0 }</programlisting></para>

      <para>Perl code in WebDyne pages must always return a
      non-undef/non-0/non-empty string value (i.e. it must return something
      that evals as "true"). If the code returns a non-true value (e.g. 0,
      undef, '') then WebDyne assumes an error has occurred in the routine. If
      you actually want to run some Perl code, but not display anything, you
      should return a reference to undef, (<command>\undef)</command>,
      e.g.:</para>

      <para><programlisting>sub log { &amp;dosomething; return \undef }</programlisting></para>

      <para>Up until now all the Perl code has been contained within the
      WebDyne file. The following example shows an instance where the code is
      contained in a separate Perl module, which should be available somewhere
      in the <filename>@INC</filename> path.</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/hello3.html"</programlisting></para>

        <para>If not already resident the module (in this case "MyModule")
        will be loaded by WebDyne, so it must be available somewhere in the
        <filename>@INC</filename> path. The example above cannot be run
        because there is no "MyModule" package on this system.</para>
      </example>
    </sect2>

    <sect2>
      <title>Use of the &lt;perl&gt; tag for in-line code.</title>

      <para>The above examples show several variations of the &lt;perl&gt; tag
      in use. Perl code that is enclosed by &lt;perl&gt;..&lt;/perl&gt; tags
      is called <emphasis>in-line</emphasis> code:</para>

      <example>
        <title>Simple in-line perl code</title>

        <para><programlisting>#include "example/inline1.html"</programlisting><ulink
        url="example/inline1.psp">Run</ulink></para>
      </example>

      <para>This is the most straight-forward use of Perl within a HTML
      document, but does not really make for easy reading - the Perl code and
      HTML are intermingled. It may be OK for quick scripts etc, but a page
      will quickly become hard to read if there is a lot of in-line Perl code
      interspersed between the HTML.</para>

      <para>in-line Perl can be useful if you want a "quick" computation, e.g.
      insertion of the current year:</para>

      <example>
        <title>Simple in-line perl code</title>

        <para><programlisting>#include "example/inline2.html"</programlisting><ulink
        url="example/inline2.psp">Run</ulink></para>
      </example>

      <para>Which can be pretty handy, but looks a bit cumbersome - the tags
      interfere with the flow of the text, making it harder to read. For this
      reason in-line perl can also be flagged in a WebDyne page using the
      shortcuts <command>! {! .. !}</command>, or by the use of processing
      instructions (<emphasis role="bold">&lt;? .. ?&gt;</emphasis>)
      e.g.:</para>

      <example>
        <title>in-line code using alternative denotation</title>

        <para><programlisting>#include "example/inline3.html"</programlisting><ulink
        url="example/inline3.psp">Run</ulink></para>
      </example>

      <para>The <emphasis role="bold">! {! .. !}</emphasis> denotation can
      also be used in tag attributes (processing instructions, and
      &lt;perl&gt; tags cannot):</para>

      <example>
        <title>in-line code in tag attributes</title>

        <para><programlisting>#include "example/inline4.html"</programlisting><ulink
        url="example/inline4.psp">Run</ulink></para>
      </example>
    </sect2>

    <sect2>
      <title>Use of the &lt;perl&gt; tag for non-inline code.</title>

      <para>Any code that is not co-mingled with the HTML of a document is
      <emphasis>non-inline</emphasis> code. It can be segmented from the
      content HTML using the __PERL__ delimiter, or by being kept in a
      completely different package and referenced as an external Perl
      subroutine call. An example of non-inline code:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/hello2.html"</programlisting><ulink
        url="example/hello2.psp">Run</ulink></para>
      </example>

      <para>Note that the &lt;perl&gt; tag in this example is explicitly
      closed and does not contain any content. However non-inline code can
      enclose HTML or text within the tags:<example>
          <title></title>

          <para><programlisting>#include "example/noninline1.html"</programlisting><ulink
          url="example/noninline1.psp">Run</ulink></para>
        </example></para>

      <para>But this is not very interesting so far - the "Hello World" text
      is not displayed when the example is run !</para>

      <para>In order for text or HTML within a non-inline perl block to be
      displayed, it must be "rendered" into the output stream by the WebDyne
      engine. This is done by calling the render() method. Let's try that
      again:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/noninline2.html"</programlisting><ulink
        url="example/noninline2.psp">Run</ulink></para>
      </example>

      <para>And again, this time showing how to render the text block multiple
      times. Note that an array reference is returned by the Perl routine -
      this is fine, and is interpreted as an array of HTML text, which is
      concatenated and send to the browser.</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/noninline3.html"</programlisting><ulink
        url="example/noninline3.psp">Run</ulink></para>
      </example>
    </sect2>

    <sect2>
      <title>Passing parameters to subroutines</title>

      <para>The behaviour of a called __PERL__ subroutine can be modified by
      passing parameters which it can act on:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/noninline7.html"</programlisting></para>

        <para><ulink url="example/noninline7.psp">Run</ulink></para>
      </example>
    </sect2>

    <sect2>
      <title>Notes about __PERL__ sections</title>

      <para>Code in __PERL__ sections has some particular properties. __PERL__
      code is only executed once. Subroutines defined in a __PERL__ section
      can be called as many times as you want, but the code outside of
      subroutines is only executed the first time a page is loaded. No matter
      how many times it is run, in the following code $i will always be
      1:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/noninline4.html"</programlisting></para>

        <para><ulink url="example/noninline4.psp">Run</ulink></para>
      </example>

      <para>Lexical variables are not accessible outside of the __PERL__
      section due to the way perl's eval() function works. The following
      example will fail:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/noninline5.html"</programlisting></para>

        <para><ulink url="example/noninline5.psp">Run</ulink></para>
      </example>

      <para>Package defined vars declared in a __PERL__ section do work, with
      caveats:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/noninline6.html"</programlisting></para>

        <para><ulink url="example/noninline6.psp">Run</ulink></para>
      </example>

      <para>See the Variables/Substitution section for clean ways to insert
      variable contents into the page.</para>
    </sect2>

    <sect2>
      <title>Variables / Substitution</title>

      <para>WebDyne starts to get more useful when variables are used to
      modify the content of a rendered text block. A simple example:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/var1.html"</programlisting><ulink
        url="example/var1.psp">Run</ulink></para>
      </example>

      <para>Note the passing of the <parameter>time</parameter> value as a
      parameter to be substituted when the text is rendered.</para>

      <para>Combine this with multiple call to the render() routine to display
      dynamic data:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/var2.html"</programlisting><ulink
        url="example/var2.psp">Run</ulink></para>
      </example>

      <para>Variables can also be used to modify tag attributes:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/var3.html"</programlisting><ulink
        url="example/var3.psp">Run</ulink></para>
      </example>

      <para>Other variable types are available also, including:</para>

      <itemizedlist>
        <listitem>
          <para>@ {} for arrays, e.g. @{'foo', bar'}</para>
        </listitem>

        <listitem>
          <para>% {} for hashes, e.g. %{ a=&gt;1, b=&gt;2 }</para>
        </listitem>

        <listitem>
          <para>+ {} for CGI parameters</para>
        </listitem>

        <listitem>
          <para>* {} for Environment variables</para>
        </listitem>

        <listitem>
          <para>^ {} for Apache request object ($r) methods</para>
        </listitem>
      </itemizedlist>

      <para>The following template uses techniques and tags discussed later,
      but should provide an example of potential variable usage:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/var4.html"</programlisting><ulink
        url="example/var4.psp">Run</ulink></para>
      </example>

      <para></para>
    </sect2>

    <sect2>
      <title>Integration with Lincoln Stein's CGI.pm module</title>

      <para>WebDyne makes extensive use of Lincoln Stein's CGI.pm module.
      Almost any CGI.pm function that renders HTML tags can be called from
      within a WebDyne template. The manual page for CGI.pm contains the
      following synopsis example:</para>

      <example>
        <title></title>

        <para><programlisting>use CGI qw/:standard/;
   print header,
         start_html('A Simple Example'),
         h1('A Simple Example'),
         start_form,
         "What's your name? ",textfield('name'),p,
         "What's the combination?", p,
         checkbox_group(-name=&gt;'words',
                        -values=&gt;['eenie','meenie','minie','moe'],
                        -defaults=&gt;['eenie','minie']), p,
         "What's your favorite color? ",
         popup_menu(-name=&gt;'color',
                    -values=&gt;['red','green','blue','chartreuse']),p,
         submit,
         end_form,
         hr;

    if (param()) {
        print "Your name is",em(param('name')),p,
              "The keywords are: ",em(join(", ",param('words'))),p,</programlisting></para>
      </example>

      <para>If the example was ported to a WebDyne compatible page it might
      look something like this:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/cgi1.html"</programlisting><ulink
        url="example/cgi1.psp">Run</ulink></para>
      </example>

      <para><important>
          <para>In the CGI.pm synopsis example the code does not finish with a
          &lt;/html&gt; tag, or the CGI.pm function end_html() - but our
          ported example does. In a WebDyne template the __PERL__ delimiter
          <emphasis role="bold">must</emphasis> come after the completion of
          the HTML page, i.e. after either a &lt;/html&gt; tag, or the
          end_html() CGI.pm equivalent. For example the following template
          will <emphasis role="bold">not</emphasis> work:</para>

          <example>
            <title></title>

            <para><programlisting>#include "example/cgi2.html"</programlisting><ulink
            url="example/cgi2.psp">Run</ulink></para>
          </example>

          <para>Note the lack of a closing &lt;/html&gt; tag. The templating
          engine sees the __PERL__ delimiter, but notices we are still in the
          body of the HTML page, so just treats the code as plain text.
          .</para>

          <para>Always finish a template with &lt;/html&gt; or
          &lt;end_html&gt; before starting a __PERL__ section</para>
        </important></para>
    </sect2>

    <sect2>
      <title>More on CGI.pm generated tags</title>

      <para>We can use CGI.pm tags such as &lt;popup_menu&gt;, instead of
      &lt;select&gt;&lt;option&gt;...&lt;/select&gt;. The following
      example:</para>

      <screen>
&lt;popup_menu value="%{red=&gt;Red, green=&gt;Green, blue=&gt;Blue}"/&gt;

</screen>

      <para>is arguably easier to read than:</para>

      <screen>
&lt;select name="values" tabindex="1"&gt;
&lt;option value="green"&gt;Green&lt;/option&gt;
&lt;option value="blue"&gt;Blue&lt;/option&gt;
&lt;option value="red"&gt;Red&lt;/option&gt;
&lt;/select&gt;

</screen>

      <para>So there is some readability benefit, however the real advantage
      shows when we consider the next example:<example>
          <title></title>

          <para><programlisting>#include "example/cgi5.html"</programlisting><ulink
          url="example/cgi5.psp">Run</ulink></para>
        </example></para>

      <para>That saved a lot of typing !</para>

      <!--
If you use the CGI.pm form of a tag (eg popup_menu etc) the HTML is generated dynamically every time the page is viewed, i.e. CGI.pm is called using the popup_menu method for each view.
This is fine for dynamic data, but for our example it is a slightly inefficient if you are chasing the highest level of performance. See the section on static tags for examples on how
you can get the best of both worlds. 

-->
    </sect2>

    <sect2>
      <title>Access to CGI query, form and keyword parameters</title>

      <para>As mentioned above WebDyne makes extensive use of the CGI.pm Perl
      module. You can access a CGI object instance in any WebDyne template by
      calling the CGI() method:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/cgi3.html"</programlisting><ulink
        url="example/cgi3.psp">Run</ulink></para>
      </example>

      <para>From there you can all any method supported by the CGI.pm module -
      see the CGI.pm manual page (<command>man CGI</command>)</para>

      <para>Since one of the most common code tasks is to access query
      parameters, WebDyne stores them in the <varname>%_</varname> global
      variable before any user defined Perl methods are called. For
      example:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/cgi4.html"</programlisting><ulink
        url="example/cgi4.psp">Run</ulink></para>
      </example>
    </sect2>

    <sect2>
      <title>Quick Pages using CGI.pm's &lt;start_html&gt;&lt;end_html&gt;
      tags</title>

      <para>For rapid development you can take advantage of CGI.pm's
      &lt;start_html&gt; and &lt;end_html&gt; tags. The following page
      generates compliant HTML (view the page source after loading it to see
      for yourself):</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/cgi6.html"</programlisting></para>

        <para><ulink url="example/cgi6.psp">Run</ulink></para>
      </example>

      <para>The &lt;start_html&gt; tag generates all the &lt;html&gt;,
      &lt;head&gt;, &lt;title&gt; tags etc needed for a valid HTML page plus
      an opening body tag. Just enter the body content, then finish with
      &lt;end_html&gt; to generate the closing &lt;body&gt; and &lt;html&gt;
      tags. See the CGI.pm manual page for more information.</para>

      <para><note>
          <para>Make sure you finish the page with &lt;end_html&gt;, not
          &lt;/end_html&gt; - the latter is not a valid tag (since you never
          had an opening &lt;end_html&gt; ). If you do accidentally do this
          any __PERL__ blocks after the incorrect tag will not work - because
          the parser never saw a closing &lt;/html&gt; tag and considers the
          __PERL__ block part of the body !</para>
        </note></para>
    </sect2>
  </sect1>

  <sect1>
    <title>Advanced Usage</title>

    <para>A lot of tasks can be achieved just using the basic features
    detailed above. However there are more advanced features that can make
    life even easier</para>

    <sect2>
      <title>Blocks</title>

      <para>Blocks are a powerful dynamic content generation tool. WebDyne can
      render arbitrary blocks of text or HTML within a page, which makes
      generation of dynamic content generally more readable than similar
      output generated within Perl code. An example:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/block1.html"</programlisting><ulink
        url="example/block1.psp">Run</ulink></para>
      </example>

      <para>There can be more than one block with the same name - any block
      with the target name will be rendered:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/block2.html"</programlisting><ulink
        url="example/block2.psp">Run</ulink></para>
      </example>

      <para>Like any other text or HTML between &lt;perl&gt; tags, blocks can
      take parameters to substitute into the text:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/block3.html"</programlisting><ulink
        url="example/block3.psp">Run</ulink></para>
      </example>

      <para>Blocks have a non-intuitive feature - they still display even if
      they are outside of the &lt;perl&gt; tags that made the call to render
      them. e.g. the following is OK:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/block4.html"</programlisting></para>

        <para><ulink url="example/block4.psp">Run</ulink></para>
      </example>

      <para>But don't mix the two styles - the following will not work as you
      expect:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/block5.html"</programlisting></para>

        <para><ulink url="example/block5.psp">Run</ulink></para>
      </example>
    </sect2>

    <sect2>
      <title>File inclusion</title>

      <para>You can include other file fragments at compile time using the
      include tag:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/include1.html"</programlisting><ulink
        url="example/include1.psp">Run</ulink></para>
      </example>

      <para>If the file name is not an absolute path name is will be loaded
      relative to the directory of the parent file. For example if file
      "bar.psp" incorporates the tag&lt;include file="foo.psp"/&gt; it will be
      expected that "foo.psp" is in the same directory as "bar.psp".</para>

      <para><important>
          <para>The include tag pulls in the target file at compile time.
          Changes to the included file after the WebDyne page is run the first
          time (resulting in compilation) are not reflected in subsequent
          output. Thus the include tag should not be seen as a shortcut to a
          pseudo Content Management System. For example &lt;include
          file="latest_news.txt"/&gt; will probably not behave in the way you
          expect. The first time you run it the latest news is displayed.
          However updating the "latest_news.txt" file will not result in
          changes to the output (it will be stale).</para>

          <para>There are betters ways to build a CMS with WebDyne - use the
          include tag sparingly !</para>
        </important></para>
    </sect2>

    <sect2>
      <title id="static_sections">Static Sections</title>

      <para>Sometimes you want to generate dynamic output in a page once only
      (e.g. a last modified date, a sidebar menu etc.) Using WebDyne this can
      be done with Perl or CGI code flagged with the "static" attribute. Any
      dynamic tag so flagged will be rendered at compile time, and the
      resulting output will become part of the compiled page - it will not
      change on subsequent page views, or have to be re-run each time the page
      is loaded. An example:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/static1.html"</programlisting><ulink
        url="example/static1.psp">Run</ulink></para>
      </example>

      <para>In fact the above page will render very quickly because it has no
      dynamic content at all once the &lt;perl&gt; content is flagged as
      static. The WebDyne engine will recognise this and store the page as a
      static HTML file in its cache. Whenever it is called WebDyne will use
      the Apache lookup_file() function to return the page as if it was just
      serving up static content.</para>

      <para>You can check this by looking at the content of the WebDyne cache
      directory (usually /var/webdyne/cache). Any file with a ".html"
      extension represents the static version of a page.</para>

      <para>Of course you can still mix static and dynamic Perl
      sections:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/static2.html"</programlisting><ulink
        url="example/static2.psp">Run</ulink></para>
      </example>

      <para>If you want the whole pages to be static, then flagging everything
      with the "static" attribute can be cumbersome. There is a special meta
      tag which flags the entire page as static:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/static3.html"</programlisting><ulink
        url="example/static3.psp">Run</ulink></para>
      </example>

      <para>If you don't like the idea of setting the static flag in meta
      data, then "using" the special package "WebDyne::Static" will have
      exactly the same effect:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/static3a.html"</programlisting><ulink
        url="example/static3a.psp">Run</ulink></para>
      </example>

      <para>If the static tag seems trivial consider the example that
      displayed country codes:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/cgi5.html"</programlisting><ulink
        url="example/cgi5.psp">Run</ulink></para>
      </example>

      <para>Every time the above example is viewed the Country Name list is
      generated dynamically via CGI.pm and the Locale::Country module (on a
      sample machine Apache Bench measured the output at around 55 pages/sec).
      This is a waste of resources because the list changes very infrequently.
      We can keep the code neat but gain a lot of speed by adding the static
      tag attribute:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/static4.html"</programlisting><ulink
        url="example/static4.psp">Run</ulink></para>
      </example>

      <para>By simply adding the "static" attribute output on a sample machine
      increased from 55 Pages/sec to 280 Pages/sec ! Judicious use of the
      static tag in places with slow changing data can markedly increase
      efficiency of the WebDyne engine.</para>
    </sect2>

    <sect2>
      <title id="caching">Caching</title>

      <para>WebDyne has the ability to cache the compiled version of a dynamic
      page according to specs you set via the API. When coupled with
      pages/blocks that are flagged as static this presents some powerful
      possibilities.</para>

      <para>There are many potential examples, but consider this one: you have
      a page that generates output by making a complex query to a database,
      which takes a lot of CPU and disk IO resources to generate. You need to
      update the page reasonably frequently (e.g. a weather forecast, near
      real time sales stats), but can't afford to have the query run every
      time someone view the page.</para>

      <para>WebDyne allows you to configure the page to cache the output for a
      period of time (say 5 minutes) before re-running the query. In this way
      users sees near real-time data without imposing a high load on the
      database/Web server.</para>

      <para>WebDyne knows to enable the caching code by looking for a meta
      tag, or by loading the "WebDyne::Cache" module in a __PERL__
      block.</para>

      <para>The cache code can command WebDyne to recompile a page based on
      any arbitrary criteria it desires. As an example the following code will
      recompile the page every 10 seconds. If viewed in between refresh
      intervals WebDyne will serve up the cached HTML result using
      r$-&gt;lookup_file(), which is very fast.</para>

      <para>Try it by running the following example and clicking refresh a few
      times over a 20 second interval</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/cache1.html"</programlisting><ulink
        url="example/cache1.psp">Run</ulink></para>
      </example>

      <para>WebDyne uses the return value of the nominated cache routine to
      determine what UID (unique ID) to assign to the page. In the above
      example we returned \undef, which signifies that the UID will remain
      unchanged.</para>

      <para>You can start to get more advanced in your handling of cached
      pages by returning a different UID based on some arbitrary criteria. To
      extend our example above: say we have a page that generated sales
      figures for a given month. The SQL code to do this takes a long time,
      and we do not want to hit the database every time someone loads up the
      page. However we cannot just cache the output, as it will vary depending
      on the month the user chooses. We can tell the cache code to generate a
      different UID based on the month selected, then cache the resulting
      output.</para>

      <para>The following example simulates such a scenario:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/cache2.html"</programlisting></para>

        <para><ulink url="example/cache2.psp">Run</ulink></para>
      </example>

      <para><important>
          <para>Take care when using user-supplied input to generate the page
          UID. There is no inbuilt code in WebDyne to limit the number of
          UID's associated with a page. Unless we check it, a malicious user
          could potentially DOS the server by supplying endless random
          "months" to the above page with a script, causing WebDyne to create
          a new file for each UID - perhaps eventually filling the disk
          partition that holds the cache directory. That is why we check the
          month is valid in the code above.</para>
        </important></para>
    </sect2>
  </sect1>

  <sect1>
    <title>Error Handling</title>

    <sect2>
      <title>Error Messages</title>

      <para></para>

      <para>Sooner or later something is going to go wrong in your code. If
      this happens WebDyne will generate an error showing what the error was
      and attempting to give information on where it came from: Take the
      following example:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/err1.html"</programlisting></para>

        <para><ulink url="example/err1.psp">Run</ulink></para>
      </example>

      <para>If you run the above example an error message will be
      displayed:.</para>

      <screenshot>
        <screeninfo>Error Message 1</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/err1.png" />
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>In this example the backtrace is not particularly useful because
      the error occurred within in-line code, so all references in the
      backtrace are to internal WebDyne modules. However the code fragment
      clearly shows the line with the error, and the page line number where
      the error occurred (line 3) is given at the start of the message. The
      reference to "(eval 268) line 1" is a red herring - it is the 268th eval
      performed by this perl process, and the error occurred in line 1 of the
      text that the eval was passed - standard perl error text, but not really
      helpful here.</para>

      <para>If we have a look at another example:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/err2.html"</programlisting></para>

        <para><ulink url="example/err2.psp">Run</ulink></para>
      </example>

      <para>And the corresponding screen shot:</para>

      <screenshot>
        <screeninfo>Error Message 2</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/err2.png" />
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>The backtrace is somewhat more helpful. Looking through the
      backtrace we can see that the error occurred in the "hello" subroutine
      (invoked at line 3 of the page) on line 5 - In this case "line 5" means
      the 5th line down from the __PERL__ delimiter. The 32 digit hexadecimal
      number is the page unique ID - it is different for each page. WebDyne
      runs the code for each page in a package name space that includes the
      page's UID - in this way pages with identical subroutine names (e.g. two
      pages with a "hello" subroutine) can be accommodated with no
      collision.</para>
    </sect2>

    <sect2>
      <title>Exceptions</title>

      <para>Errors (exceptions) can be generated within a WebDyne page in two
      ways:</para>

      <itemizedlist>
        <listitem>
          <para>By calling die() as shown in example above.</para>
        </listitem>

        <listitem>
          <para>By returning an error message via the err() method, exported
          by default.</para>
        </listitem>
      </itemizedlist>

      <para>Examples</para>

      <para><programlisting>__PERL__


#  Good
#
sub hello {

    return err('no foobar') if !$foobar;

}

# Also OK
#
sub hello {

    return die('no foobar') if !$foobar;

}</programlisting></para>
    </sect2>

    <sect2>
      <title>Error Checking</title>

      <para>So far all the code examples have just assumed that any call to a
      WebDyne API method has been successful - no error checking is done.
      WebDyne always returns "undef" if an API method call fails - which
      should be checked for after every call in a best practice
      scenario.</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/err3.html"</programlisting><ulink
        url="example/err3.psp">Run</ulink></para>
      </example>

      <para>You can use the err() function to check for errors in WebDyne Perl
      code associated with a page, e.g.:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/err4.html"</programlisting></para>

        <para><ulink url="example/err4.psp">Run</ulink></para>
      </example>

      <para>Note that the backtrace in this example shows clearly where the
      error was triggered from.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>WebDyne API</title>

    <sect2>
      <title>WebDyne methods</title>

      <para>When running Perl code within a WebDyne page the very first
      parameter passed to any routine (in-line or in a __PERL__ block) is an
      instance of the WebDyne page object (referred to as
      <varname>$self</varname> in most of the examples). All methods return
      <returnvalue>undef</returnvalue> on failure, and raise an error using
      the <function>err()</function> function. The following methods are
      available to any instance of the WebDyne object:</para>

      <variablelist>
        <varlistentry>
          <term><methodname>CGI()</methodname></term>

          <listitem>
            <para>Returns an instance of the CGI.pm object for the current
            request.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>r(), request()</methodname></term>

          <listitem>
            <para>Returns an instance of the Apache request object.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>render( <replaceable>key=&gt;value,
          key=&gt;value</replaceable>, .. )</methodname></term>

          <listitem>
            <para>Called to render the text or HTML between
            &lt;perl&gt;..&lt;/perl&gt; tags. Optional key and value pairs
            will be substituted into the output as per the variable section.
            Returns a scalar ref of the resulting HTML.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>render_block( blockname,
          <replaceable>key=&gt;value, key=&gt;value,
          ..</replaceable>).</methodname></term>

          <listitem>
            <para>Called to render a block of text or HTML between
            &lt;block&gt;..&lt;/block&gt; tags. Optional key and value pairs
            will be substituted into the output as per the variable section.
            Returns scalar ref of resulting HTML if called with from
            &lt;perl&gt;..&lt;/perl&gt; section containing the block to be
            rendered, or true (\undef) if the block is not within the
            &lt;perl&gt;..&lt;/perl&gt; section (e.g. further into the
            document, see the block section for an example).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>redirect({ uri=&gt;uri | file=&gt;filename |
          html=&gt;\html_text })</methodname></term>

          <listitem>
            <para>Will redirect to URI or file nominated, or display only
            nominated text. Any rendering done to prior to this method is
            abandoned.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>cache_inode( <replaceable>seed</replaceable>
          )</methodname></term>

          <listitem>
            <para>Returns the page unique ID (UID). Called inode for legacy
            reasons, as that is what the UID used to be based on. If a seed
            value is supplied a new UID will be generated based on an MD5 of
            the seed. Seed only needs to be supplied if using advanced cache
            handlers.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>cache_mtime( <replaceable>uid</replaceable>
          )</methodname></term>

          <listitem>
            <para>Returns the mtime (modification time) of the cache file
            associated with the optionally supplied UID. If no UID supplied
            the current one will be used. Can be used to make cache compile
            decisions by WebDyne::Cache code (e.g if page &gt; x minutes old,
            recompile).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>cache_compile( )</methodname></term>

          <listitem>
            <para>Force recompilation of cache file. Can be used in cache code
            to force recompilation of a page, even if it is flagged static.
            Returns current value if no parameters supplied, or sets if
            parameter supplied.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>no_cache()</methodname></term>

          <listitem>
            <para>Send headers indicating that the page is not be cached by
            the browser or intermediate proxies. By default WebDyne pages
            automatically set the no-cache headers, although this behaviour
            can be modified by clearing the
            <varname>$WEBDYNE_NO_CACHE</varname> variable and using this
            function</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>meta()</methodname></term>

          <listitem>
            <para>Return a hash ref containing the meta data for this page.
            Alterations to meta data are persistent for this process, and
            carry across Apache requests (although not across different Apache
            processes)</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2>
      <title>WebDyne Constants</title>

      <para>Constants defined in the WebDyne::Constant package control various
      aspects of how WebDyne behaves. Constants can be modified globally by
      altering a system file (<filename>/etc/constant.pm</filename> under
      Linux distros), or by altering configuration parameters within the
      Apache or lighttpd/FastCGI web servers.</para>

      <sect3>
        <title id="webdyne_constants">Global constants file</title>

        <para>WebDyne will look for a system constants file under
        <filename>/etc/constant.pm</filename> and set package variables
        according to values found in that file. The file is in Perl
        Data::Dumper format, and takes the format:</para>

        <programlisting># sample /etc/constant.pm file
#
$VAR1={
        WebDyne::Constant =&gt; {

                WEBDYNE_CACHE_DN       =&gt; '/data1/webdyne/cache',
                WEBDYNE_STORE_COMMENTS =&gt; 1,
                #  ... more variables for WebDyne package

       },

       WebDyne::Session::Constant =&gt; {

                WEBDYNE_SESSION_ID_COOKIE_NAME =&gt; 'session_cookie',
                #  ... more variables for WebDyne::Session package

       },

};</programlisting>

        <para>The file is not present by default and should be created if you
        wish to change any of the WebDyne constants from their default
        values.</para>

        <important>
          <para>Always check the syntax of the
          <filename>/etc/constant.pm</filename> file after editing by running
          <command>perl -c -w /etc/constant.pm</command> to check that the
          file is readable by Perl.</para>
        </important>

        <para></para>
      </sect3>

      <sect3>
        <title>Setting WebDyne constants in Apache</title>

        <para>WebDyne constants can be set in an Apache httpd.conf file using
        the PerlSetVar directive:</para>

        <para><programlisting>
PerlHandler     WebDyne
PerlSetVar      WEBDYNE_CACHE_DN                '/data1/webdyne/cache'
PerlSetVar      WEBDYNE_STORE_COMMENTS          1

#  From WebDyne::Session package
#
PerlSetVar      WEBDYNE_SESSION_ID_COOKIE_NAME  'session_cookie'

</programlisting></para>

        <para><important>
            <para>WebDyne constants cannot be set on a per-location or
            per-directory basis - they are read from the top level of the
            config file and set globally.</para>

            <para>Some 1.x versions of mod_perl do not read PerlSetVar
            variables correctly. If you encounter this problem use a
            &lt;Perl&gt;..&lt;/Perl&gt; section in the httpd.conf file,
            e.g.:</para>

            <programlisting># Mod_perl 1.x

PerlHandler     WebDyne
&lt;Perl&gt;
$WebDyne::Constant::WEBDYNE_CACHE_DN='/data1/webdyne/cache';
$WebDyne::Constant::WEBDYNE_STORE_COMMENTS=1;
$WebDyne::Session::Constant::WEBDYNE_SESSION_ID_COOKIE_NAME='session_cookie';
&lt;/Perl&gt;

</programlisting>
          </important></para>
      </sect3>

      <sect3>
        <title>Setting WebDyne constants in lighttpd/FastCGI</title>

        <para>WebDyne constants can be set in lighttpd/FastCGI using the
        bin-environment directive. Here is a sample lighttpd.conf file showing
        WebDyne constants:</para>

        <para><programlisting>fastcgi.server = ( ".psp" =&gt;
                   ( "localhost" =&gt;
                      (
                        "socket" =&gt; "/tmp/psp-fastcgi.socket",
                        "bin-path" =&gt; "/opt/webdyne/bin/wdfastcgi",
                        "bin-environment"     =&gt; (
                          "WEBDYNE_CACHE_DN   =&gt; "/data1/webdyne/cache"
                        )
                     )
                   )
                 )
</programlisting></para>
      </sect3>

      <sect3>
        <title>Constants Reference</title>

        <para>The following constants can be altered to change the behaviour
        of the WebDyne package. All these constants reside in the
        <classname>WebDyne::Constant</classname> package namespace.</para>

        <variablelist>
          <varlistentry>
            <term><varname>$WEBDYNE_CACHE_DN</varname></term>

            <listitem>
              <para>The name of the directory that will hold partially
              compiled WebDyne cache files. Must exist and be writable by the
              Apache process</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_STARTUP_CACHE_FLUSH_DN</varname></term>

            <listitem>
              <para>Remove all existing disk cache files at Apache startup.
              1=yes (default), 0=no. By default all disk cache files are
              removed at startup, and thus pages must be recompiled again the
              first time they are viewed. If you set this to 0 (no) then disk
              cache files will be saved between startups and pages will not
              need to be re-compiled if Apache is restarted.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_CACHE_CHECK_FREQ</varname></term>

            <listitem>
              <para>Check the memory cache after this many request
              (per-process counter). default=256. After this many requests a
              housekeeping function will check compiled pages that are stored
              in memory and remove old ones according to the criteria
              below.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_CACHE_HIGH_WATER</varname></term>

            <listitem>
              <para>Remove compiled from pages from memory when we have more
              than this many. default=64</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_CACHE_LOW_WATER</varname></term>

            <listitem>
              <para>After reaching HIGH_WATER delete until we get down to this
              amount. default=32</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_CACHE_CLEAN_METHOD</varname></term>

            <listitem>
              <para>Clean algorithm. default=1, means least used cleaned
              first, 0 means oldest last view cleaned first</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_EVAL_SAFE</varname></term>

            <listitem>
              <para>default=0 (no), If set to 1 means eval in a Safe.pm
              container.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_EVAL_SAFE_OPCODE_AR</varname></term>

            <listitem>
              <para>The opcode set to use in Safe.pm evals (see the Safe man
              page). Defaults to "[':default']". Use
              [&amp;Opcode::full_opset()] for the full opset. CAUTION Use of
              WebDyne with Safe.pm not comprehensively tested.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_EVAL_USE_STRICT</varname></term>

            <listitem>
              <para>The string to use before each eval. Defaults to "use
              strict qw(vars);". Set to undef if you do not want strict.pm. In
              Safe mode this becomes a flag only - set undef for "no strict",
              and non-undef for "use strict" equivalence in a Safe mode
              (checked under Perl 5.8.6 only, results in earlier versions of
              Perl may vary).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_STRICT_VARS</varname></term>

            <listitem>
              <para>Check if a var is declared in a render block (e.g $ {foo})
              but not supplied as a render parameter. If so will throw an
              error. Set to 0 to ignore. default=1</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_DUMP_FLAG</varname></term>

            <listitem>
              <para>If 1, any instance of the special &lt;dump&gt; tag will
              print out results from CGI-&gt;dump(). Use when debugging forms.
              default=0</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_DTD</varname></term>

            <listitem>
              <para>The DTD to place at the top of a rendered page. Defaults
              to: &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01
              Transitional//EN"
              "http://www.w3.org/TR/html4/loose.dtd"&gt;</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_HTML_PARAM</varname></term>

            <listitem>
              <para>attributes for the &lt;html&gt; tag, e.g. { lang
              =&gt;'en-US' }. undef by default</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_COMPILE_IGNORE_WHITESPACE</varname></term>

            <listitem>
              <para>Ignore source file whitespace as per HTML::TreeBuilder
              ignore_ignorable_whitespace function. Defaults to 1</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_COMPILE_NO_SPACE_COMPACTING</varname></term>

            <listitem>
              <para>Do not compact source file whitespace as per
              HTML::TreeBuilder no_space_compacting function. Defaults to
              1</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_STORE_COMMENTS</varname></term>

            <listitem>
              <para>By default comments are not rendered. Set to 1 to store
              and display comments from source files. Defaults to 0</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_NO_CACHE</varname>.</term>

            <listitem>
              <para>WebDyne should send no-cache HTTP headers. Set to 0 to not
              send such headers. Defaults to 1</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_DELAYED_BLOCK_RENDER</varname></term>

            <listitem>
              <para>By default WebDyne will render blocks targeted by a
              render_block() call, even that are outside the originating
              &lt;perl&gt;..&lt;/perl&gt; section that made the call. Set to 0
              to not render such blocks. Defaults to 1</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_WARNINGS_FATAL</varname></term>

            <listitem>
              <para>If a programs issues a warning via warn() this constant
              determines if it will be treated as a fatal error. Default is 0
              (warnings not fatal). Set to 1 if you want any warn() to behave
              as if die() had been called..</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_CGI_DISABLE_UPLOADS</varname></term>

            <listitem>
              <para>Disable CGI.pm file uploads. Defaults to 1 (true - do not
              allow uploads).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><varname>$WEBDYNE_CGI_POST_MAX</varname></term>

            <listitem>
              <para>Maximum size of a POST request. Defaults to 512Kb</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Extension modules (e.g., WebDyne::Session) have their own
        constants - see each package for details.</para>
      </sect3>
    </sect2>

    <sect2>
      <title>WebDyne Directives</title>

      <para>A limited number of directives are are available which change the
      way WebDyne processes pages. Directives are set in either the Apache or
      lighttpd .conf files and can be set differently per location. At this
      stage only one directive applies to the core WebDyne module:</para>

      <variablelist>
        <varlistentry>
          <term><varname>WebDyneHandler</varname></term>

          <listitem>
            <para>The name of the handler that WebDyne should invoke instead
            of handling the page internally. The only other handler available
            today is WebDyne::Chain.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>This directive exists primarily to allow lighttpd/FastCGI to
      invoke WebDyne::Chain as the primary handler. An example from the
      lighttpd.conf file (see the WebDyne::Chain documentation for information
      on the <command>WebDyneChain</command> directive):</para>

      <para><programlisting>fastcgi.server = ( ".psp" =&gt;
                   ( "localhost" =&gt;
                      (
                        "socket" =&gt; "/tmp/psp-fastcgi.socket",
                        "bin-path" =&gt; "/opt/webdyne/bin/wdfastcgi",
                        "bin-environment"     =&gt; (
                          #  Handle WebDyne requests via WebDyne::Chain, which in turn will
                          #  pass all requests through WebDyne::Session so that a unique session 
                          #  cookie is assigned to each user.
                          "WebDyneHandler"    =&gt; "WebDyne::Chain",
                          "WebDyneChain"      =&gt; "WebDyne::Session",
                        )
                     )
                   )
                 )
</programlisting></para>

      <para>It can be used in Apache httpd.conf files, but is not very
      efficient:</para>

      <para><programlisting>
#  This will work, but is not very efficient
#
&lt;location /shop/&gt;
PerlHandler     WebDyne
PerlSetVar      WebDyneHandler               'WebDyne::Chain'
PerlSetVar      WebDyneChain                 'WebDyne::Session'
&lt;/location&gt;


#  This is the same, and is more efficient
#
&lt;location /shop/&gt;
PerlHandler     WebDyne::Chain
PerlSetVar      WebDyneChain                 'WebDyne::Session'
&lt;/location&gt;


</programlisting></para>

      <para>As with Apache you can do per-location/directory configuration of
      WebDyne, however the configuration is a little more complex. The example
      below shows how to set different directives on a per location basis,
      using WebDyne and WebDyne::Chain directives as examples:</para>

      <para><programlisting>$HTTP["url"] =~"^/proxcube/" {

        server.document-root = "/opt/proxcube/lib/perl5/site_perl/5.8.6/ProxCube/HTML/html/",

        fastcgi.server = (

                ".psp" =&gt; (
                        "localhost" =&gt; (
                                "socket"      =&gt; "/tmp/psp-fastcgi-proxube.socket",
                                "bin-path"    =&gt; "/opt/webdyne/bin/wdfastcgi",
                                "bin-environment" =&gt; (
                                        "WebDyneHandler"  =&gt; "WebDyne::Chain",
                                        "WebDyneChain"    =&gt; "ProxCube::HTML ProxCube::License"
                                        "WebDyneTemplate" =&gt; "/opt/proxcube/lib/perl5/site_perl/5...
                                        "WebDyneFilter"   =&gt; "WebDyne::Template WebDyne::CGI",
                                        "MenuData"        =&gt; "/opt/proxcube/lib/perl5/site_perl/5...
                                        "WebDyneLocation" =&gt; "/proxcube/"
                                )
                        )
                )
        )

},


$HTTP["url"] =~"^/example/" {

        server.document-root = "/var/www/html/",

        fastcgi.server = (

                ".psp" =&gt; (
                        "localhost" =&gt; (
                                "socket"      =&gt; "/tmp/psp-fastcgi-example.socket",
                                "bin-path"    =&gt; "/opt/webdyne/bin/wdfastcgi",
                                "bin-environment" =&gt; (
                                        "WebDyneLocation" =&gt; "/example/"
                                )
                        )
                )
        )
}   

</programlisting></para>

      <para><important>
          <para>As noted in the configuration file the socket file names must
          be unique for each location that you want different WebDyne
          directives/constants for.</para>
        </important></para>
    </sect2>
  </sect1>

  <sect1>
    <title>Miscellaneous</title>

    <sect2>
      <title>Command Line Utilities</title>

      <para>Command line utilities are fairly basic at this stage. By default
      they are located in <filename>/opt/webdyne/bin</filename>.</para>

      <variablelist>
        <varlistentry>
          <term><command>wdapacheinit</command></term>

          <listitem>
            <para>Runs the WebDyne initialization routines, which create
            needed directories, modify and create Apache .conf files
            etc.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>wdcompile</command></term>

          <listitem>
            <para>Usage: <command>wdcompile filename.psp</command>. Will
            compile a .psp file and use Data::Dumper to display the WebDyne
            internal representation of the page tree structure. Useful as a
            troubleshooting tool to see how HTML::TreeBuilder has parsed your
            source file, and to show up any misplaced tags etc.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>wdrender</command></term>

          <listitem>
            <para>Usage: <command>wdrender filename.psp</command>. Will
            attempt to render the source file to screen using WebDyne. Can
            only do basic tasks - any advanced use (such as calls to the
            Apache request object) will fail.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>wddump</command></term>

          <listitem>
            <para>Usage: <command>wddump filename</command>. Where filename is
            a compiled WebDyne source file (usually in /var/webdyne/cache).
            Will dump out the saved data structure of the compiled
            file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>wdfastcgi</command></term>

          <listitem>
            <para>Used to run WebDyne under FastCGI - not usually invoked
            interactively</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2>
      <title>Other files referenced by WebDyne</title>

      <para></para>

      <variablelist>
        <varlistentry>
          <term><filename>/etc/constant.pm</filename></term>

          <listitem>
            <para>Used for storage of local constants that override WebDyne
            defaults. See the <link
            linkend="webdyne_constants">WebDyne::Constant</link> section for
            details</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>/etc/perl5lib.pm</filename></term>

          <listitem>
            <para>Contains a list of directories that WebDyne will look in for
            libraries. Effectively extends Perl's <varname>@INC</varname>
            variable. If you install CPAN or other Perl modules to a
            particular directory using <command>perl Makefile.PL
            PREFIX=/opt/mylibs</command>, then add
            '<filename>/opt/mylibs</filename>' to the
            <filename>perl5lib.pm</filename> file, WebDyne will find
            them.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1>
    <title>Extending WebDyne</title>

    <para>WebDyne can be extended by the installation and use of supplementary
    Perl packages. There are several standard packages that come with the
    Webdyne distribution, or you can build your own using one of the standard
    packages as a template.</para>

    <para>The following gives an overview of the standard packages included in
    the distribution</para>

    <sect2>
      <title id="webdyne_chain">WebDyne::Chain</title>

      <para>WebDyne::Chain is a module that will cascade a WebDyne request
      through one or more modules before delivery to the WebDyne engine. Most
      modules that extend WebDyne rely on WebDyne::Chain to get themselves
      inserted into the request lifecycle.</para>

      <para>Whilst WebDyne::Chain does not modify content itself, it allows
      any of the modules below to intercept the request as if they had been
      loaded by the target page directly (i.e., loaded in the __PERL__ section
      of a page via the "use" or "require" functions).</para>

      <para>Using WebDyne::Chain you can modify the behaviour of WebDyne pages
      based on their location. The WebDyne::Template module can be used in
      such scenario to wrap all pages in a location with a particular
      template. Another would be to make all pages in a particular location
      static without loading the WebDyne::Static module in each
      page:<programlisting>&lt;Location /static&gt;

#  All pages in this location will be generated once only.
PerlHandler     WebDyne::Chain
PerlSetVar      WebDyneChain    'WebDyne::Static'

&lt;/Location&gt;</programlisting></para>

      <para>Multiple modules can be chained at once:</para>

      <programlisting>&lt;Location /&gt;

#  We want templating and session cookies for all pages on our site.
PerlHandler     WebDyne::Chain
PerlSetVar      WebDyneChain    'WebDyne::Session WebDyne::Template'
PerlSetVar      WebDyneTemplate '/path/to/template.psp'

&lt;/Location&gt;</programlisting>

      <para>The above example would place all pages within the named template,
      and make session information to all pages via $self-&gt;session_id(). A
      good start to a rudimentary CMS.</para>

      <variablelist>
        <varlistentry>
          <term><methodname>WebDyneChain</methodname></term>

          <listitem>
            <para>Directive. Supply a space separated string of WebDyne
            modules that the request should be passed through.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2>
      <title>WebDyne::Static</title>

      <para>Loading WebDyne::Static into a __PERL__ block flags to WebDyne
      that the entire page should be rendered once at compile time, then the
      static HTML resulting from that compile will be handed out on subsequent
      requests. Any active element or code in the page will only be run once.
      There are no API methods associated with this module</para>

      <para>See the <link linkend="static_sections">Static Sections</link>
      reference for more information on how to use this module within an
      individual page.</para>

      <para>WebDyne::Static can also be used in conjunction with the <link
      linkend="webdyne_chain">WebDyne::Chain</link> module to flag all files
      in a directory or location as static. An example httpd.conf
      snippet:</para>

      <para><programlisting>&lt;Location /static/&gt;

PerlHandler     WebDyne::Chain
PerlSetVar      WebDyneChain    'WebDyne::Static'

&lt;/Location&gt;
</programlisting></para>
    </sect2>

    <sect2>
      <title>WebDyne::Cache</title>

      <para>Loading WebDyne::Cache into a __PERL__ block flags to WebDyne that
      the page wants the engine to call a designated routine every time it is
      run. The called routine can generate a new UID (Unique ID) for the page,
      or force it to be recompiled. There are no API methods associated with
      this module.</para>

      <para>See the <link linkend="caching">Caching</link> section above for
      more information on how to use this module with an individual
      page.</para>

      <para>WebDyne::Cache can also be used in conjunction with the <link
      linkend="webdyne_chain">WebDyne::Chain</link> module to flag all files
      in a particular location are subject to a cache handling routine. An
      example httpd.conf snippet:</para>

      <para><programlisting>&lt;Location /cache/&gt;

#  Run all requests through the MyModule::cache function to see if a page should
#  be recompiled before sending it out
#
PerlHandler     WebDyne::Chain
PerlSetVar      WebDyneChain    'WebDyne::Cache'
PerlSetVar      WebDyneCacheHandler '&amp;MyModule::cache'

&lt;/Location&gt;
</programlisting></para>

      <para>Note that any package used as the WebDyneCacheHandler target
      should be already loaded via "PerlRequire" or similar mechanism.</para>

      <para>As an example of why this could be useful consider the <link
      linkend="caching">caching examples</link> above. Instead of flagging
      that an individual file should only be re-compiled every x seconds, that
      policy could be applied to a whole directory with no alteration to the
      individual pages.</para>
    </sect2>

    <sect2>
      <title>WebDyne::Session</title>

      <para>WebDyne::Session generates a unique session ID for each browser
      connection and stores it in a cookie. It has the following API:</para>

      <variablelist>
        <varlistentry>
          <term><methodname>session_id()</methodname></term>

          <listitem>
            <para>Function. Returns the unique session id assigned to the
            browser. Call via $self-&gt;session_id() from perl code.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>$WEBDYNE_SESSION_ID_COOKIE_NAME </varname></term>

          <listitem>
            <para>Constant. Holds the name of the cookie that will be used to
            assign the session id in the users browser. Defaults to "session".
            Set as per <link
            linkend="webdyne_constants">WebDyne::Constants</link> section.
            Resides in the <classname>WebDyne::Session::Constant</classname>
            package namespace.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Example:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/session1.html"</programlisting></para>

        <para><ulink url="example/session1.psp">Run</ulink></para>
      </example>

      <para>WebDyne::Session can also be used in conjunction with the <link
      linkend="webdyne_chain">WebDyne::Chain</link> module to make session
      information available to all pages within a location. An example
      httpd.conf snippet:</para>

      <para><programlisting>&lt;Location /&gt;

# We want session cookies for our whole site
#
PerlHandler     WebDyne::Chain
PerlSetVar      WebDyneChain    'WebDyne::Session'

#  Change cookie name from "session" to "gingernut" for something different
#
PerlSetVar      WEBDYNE_SESSION_ID_COOKIE_NAME    'gingernut'

&lt;/Location&gt;
</programlisting></para>
    </sect2>

    <sect2>
      <title>WebDyne::State::BerkeleyDB</title>

      <para>WebDyne::State::BerkeleyDB works in conjunction with
      WebDyne::Session to maintain simple state information for a session. It
      inherits from WebDyne::State, and it could be used to build other state
      storage modules (e.g. WebDyne::State::MySQL)</para>

      <variablelist>
        <varlistentry>
          <term><methodname>login()</methodname></term>

          <listitem>
            <para>Function. Logs a user in, creating a state entry for them.
            Returns true if successful, undef if fails.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>user()</methodname></term>

          <listitem>
            <para>Function. Returns scalar ref containing the name of the
            logged user for this session, undef if fails</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>logout()</methodname></term>

          <listitem>
            <para>Function. Logout the current user, deleting all state
            info.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>state_store( <replaceable>key=&gt;value,
          key=&gt;value | hashref</replaceable> )</methodname></term>

          <listitem>
            <para>Function. Store a key and associated value into the state
            database. Returns true for success, undef for failure. You can
            optionally pass a hash ref to state_store, in which case it will
            replace the existing state hash.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>state_fetch( <replaceable>key</replaceable>
          )</methodname></term>

          <listitem>
            <para>Function.Fetch a previously stored key, Returns scalar ref
            to key value if successful, undef for failure. If no key name is
            supplied a hash ref of the current state hash will be
            returned.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>state_delete()</methodname></term>

          <listitem>
            <para>Function.Delete the state database for this session. Returns
            true for success, undef for failure. Actual deletion does not take
            place until cleanup() phase of Apache lifecycle.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>filename( <replaceable>filename</replaceable>
          )</methodname></term>

          <listitem>
            <para>Function.Fetch or set the name of the file where the state
            information will be held (defaults to
            <varname>$WEBDYNE_CACHE_DIR</varname><filename>/state.db</filename>).
            Must be set before any state operations take place.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>$WEBDYNE_BERKELEYDB_STATE_FN </varname></term>

          <listitem>
            <para>Constant. Name of the file that will hold the state
            database. Can be just a file name or an absolute path name. Set as
            per <link linkend="webdyne_constants">WebDyne::Constants</link>
            section. Defined in the
            <classname>WebDyne::State::BerkeleyDB::Constant</classname>
            namespace. Defaults to <filename>state.db</filename></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>$WEBDYNE_BERKELEYDB_STATE_DN</varname></term>

          <listitem>
            <para>Constant.Name of the directory where the state file will be
            located. If an absolute filename (i.e. one that includes a
            directory name) is given above then this variable is ignored. Set
            as per <link linkend="webdyne_constants">WebDyne::Constants</link>
            section. Defined in the
            <classname>WebDyne::State::BerkeleyDB::Constant</classname>
            namespace. Defaults to <varname>$WEBDYNE_CACHE_DN</varname></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Example:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/state1.html"</programlisting></para>

        <para><ulink url="example/state1.psp">Run</ulink></para>
      </example>

      <important>
        <para>State information is stored against the browser session ID, not
        against a user ID. The same user on two different machines will have
        two different state entries.</para>

        <para>WebDyne::State is meant for simplistic storage of state
        information - it is not meant for long term storage of user
        preferences or other data, and should not be used as a persistent
        database.</para>
      </important>

      <para>WebDyne::State::BerkelyDB can also be used in conjunction with the
      <link linkend="webdyne_chain">WebDyne::Chain</link> module to make state
      information available to all pages within a location. An example
      httpd.conf snippet:</para>

      <para><programlisting>&lt;Location /&gt;

#  We want state information accessible across the whole site. WebDyne::State only works
#  in conjunction with WebDyne::Session, so it must be in the chain also.
#
PerlHandler     WebDyne::Chain
PerlSetVar      WebDyneChain    'WebDyne::Session WebDyne::State::BerkeleyDB'

&lt;/Location&gt;</programlisting></para>
    </sect2>

    <sect2>
      <title>WebDyne::Template</title>

      <para>One of the more powerful WebDyne extensions. WebDyne::Template can
      be used to build CMS (Content Management Systems). It will extract the
      &lt;head&gt; and &lt;body&gt; sections from an existing HTML or WebDyne
      page and insert them into the corresponding head and body blocks of a
      template file.</para>

      <para>The merging is done once at compile time - there are no repeated
      search and replace operations each time the file is loaded, or server
      side includes, so the resulting pages are quite fast.</para>

      <para>Both the template and content files should be complete - there is
      no need to write the content without a &lt;head&gt; section, or leave
      out &lt;html&gt; tags. As a result both the content and template files
      can be viewed as standalone documents.</para>

      <para>The API:</para>

      <variablelist>
        <varlistentry>
          <term><methodname>template ( filename )</methodname></term>

          <listitem>
            <para>Function. Set the file name of the template to be used. If
            no path is specified file name will be relative to the current
            request directory</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>WebDyneTemplate</term>

          <listitem>
            <para>Directive. Can be used to supply the template file name in a
            Apache or lighttpd/FastCGI configuration file.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Example:</para>

      <para>The template:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/template1.html"</programlisting></para>

        <para><ulink url="example/template1.psp">Run</ulink></para>
      </example>

      <para>The content, run to view resulting merge:</para>

      <example>
        <title></title>

        <para><programlisting>#include "example/content1.html"</programlisting></para>

        <para><ulink url="example/content1.psp">Run</ulink></para>
      </example>

      <para>In real life it is not desirable to put the template name into
      every content file (as was done in the above example), nor would we want
      to have to "use WebDyne::Template" in every content file.</para>

      <para>To overcome this WebDyne::Template can read the template file name
      using the Apache dir_config function, and assign a template on a per
      location basis using the WebDyneTemplate directive. Here is a sample
      httpd.conf file:</para>

      <para><programlisting>&lt;Location /&gt;

PerlHandler     WebDyne::Chain
PerlSetVar      WebDyneChain    'WebDyne::Template'
PerlSetVar      WebDyneTemplate '/path/to/template.psp'

&lt;/Location&gt;

</programlisting></para>
    </sect2>
  </sect1>

  <appendix id="gpl">
    <title>GNU General Public License</title>

    <sect1 id="gpl-1">
      <title>Preamble</title>

      <para>The licenses for most software are designed to take away your
      freedom to share and change it. By contrast, the GNU General Public
      License is intended to guarantee your freedom to share and change free
      software - to make sure the software is free for all its users. This
      General Public License applies to most of the Free Software Foundation's
      software and to any other program whose authors commit to using it.
      (Some other Free Software Foundation software is covered by the GNU
      Library General Public License instead.) You can apply it to your
      programs, too.</para>

      <para>When we speak of free software, we are referring to freedom, not
      price. Our General Public Licenses are designed to make sure that you
      have the freedom to distribute copies of free software (and charge for
      this service if you wish), that you receive source code or can get it if
      you want it, that you can change the software or use pieces of it in new
      free programs; and that you know you can do these things.</para>

      <para>To protect your rights, we need to make restrictions that forbid
      anyone to deny you these rights or to ask you to surrender the rights.
      These restrictions translate to certain responsibilities for you if you
      distribute copies of the software, or if you modify it.</para>

      <para>For example, if you distribute copies of such a program, whether
      gratis or for a fee, you must give the recipients all the rights that
      you have. You must make sure that they, too, receive or can get the
      source code. And you must show them these terms so they know their
      rights.</para>

      <para>We protect your rights with two steps: <orderedlist>
          <listitem>
            <para>copyright the software, and</para>
          </listitem>

          <listitem>
            <para>offer you this license which gives you legal permission to
            copy, distribute and/or modify the software.</para>
          </listitem>
        </orderedlist></para>

      <para>Also, for each author's protection and ours, we want to make
      certain that everyone understands that there is no warranty for this
      free software. If the software is modified by someone else and passed
      on, we want its recipients to know that what they have is not the
      original, so that any problems introduced by others will not reflect on
      the original authors' reputations.</para>

      <para>Finally, any free program is threatened constantly by software
      patents. We wish to avoid the danger that redistributors of a free
      program will individually obtain patent licenses, in effect making the
      program proprietary. To prevent this, we have made it clear that any
      patent must be licensed for everyone's free use or not licensed at
      all.</para>

      <para>The precise terms and conditions for copying, distribution and
      modification follow.</para>
    </sect1>

    <sect1 id="gpl-2">
      <title>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND
      MODIFICATION</title>

      <sect2 id="gpl-2-0">
        <title>Section 0</title>

        <para>This License applies to any program or other work which contains
        a notice placed by the copyright holder saying it may be distributed
        under the terms of this General Public License. The "Program", below,
        refers to any such program or work, and a <quote>work based on the
        Program </quote> means either the Program or any derivative work under
        copyright law: that is to say, a work containing the Program or a
        portion of it, either verbatim or with modifications and/or translated
        into another language. (Hereinafter, translation is included without
        limitation in the term <quote>modification </quote>.) Each licensee is
        addressed as <quote>you</quote>.</para>

        <para>Activities other than copying, distribution and modification are
        not covered by this License; they are outside its scope. The act of
        running the Program is not restricted, and the output from the Program
        is covered only if its contents constitute a work based on the Program
        (independent of having been made by running the Program). Whether that
        is true depends on what the Program does.</para>
      </sect2>

      <sect2 id="gpl-2-1">
        <title>Section 1</title>

        <para>You may copy and distribute verbatim copies of the Program's
        source code as you receive it, in any medium, provided that you
        conspicuously and appropriately publish on each copy an appropriate
        copyright notice and disclaimer of warranty; keep intact all the
        notices that refer to this License and to the absence of any warranty;
        and give any other recipients of the Program a copy of this License
        along with the Program.</para>

        <para>You may charge a fee for the physical act of transferring a
        copy, and you may at your option offer warranty protection in exchange
        for a fee.</para>
      </sect2>

      <sect2 id="gpl-2-2">
        <title>Section 2</title>

        <para>You may modify your copy or copies of the Program or any portion
        of it, thus forming a work based on the Program, and copy and
        distribute such modifications or work under the terms of <link
        linkend="gpl-2-1">Section 1 </link> above, provided that you also meet
        all of these conditions: <orderedlist>
            <listitem>
              <para>You must cause the modified files to carry prominent
              notices stating that you changed the files and the date of any
              change.</para>
            </listitem>

            <listitem>
              <para>You must cause any work that you distribute or publish,
              that in whole or in part contains or is derived from the Program
              or any part thereof, to be licensed as a whole at no charge to
              all third parties under the terms of this License.</para>
            </listitem>

            <listitem>
              <para>If the modified program normally reads commands
              interactively when run, you must cause it, when started running
              for such interactive use in the most ordinary way, to print or
              display an announcement including an appropriate copyright
              notice and a notice that there is no warranty (or else, saying
              that you provide a warranty) and that users may redistribute the
              program under these conditions, and telling the user how to view
              a copy of this License. <note>
                  <title>Exception:</title>

                  <para>If the Program itself is interactive but does not
                  normally print such an announcement, your work based on the
                  Program is not required to print an announcement.)</para>
                </note></para>
            </listitem>
          </orderedlist></para>

        <para>These requirements apply to the modified work as a whole. If
        identifiable sections of that work are not derived from the Program,
        and can be reasonably considered independent and separate works in
        themselves, then this License, and its terms, do not apply to those
        sections when you distribute them as separate works. But when you
        distribute the same sections as part of a whole which is a work based
        on the Program, the distribution of the whole must be on the terms of
        this License, whose permissions for other licensees extend to the
        entire whole, and thus to each and every part regardless of who wrote
        it.</para>

        <para>Thus, it is not the intent of this section to claim rights or
        contest your rights to work written entirely by you; rather, the
        intent is to exercise the right to control the distribution of
        derivative or collective works based on the Program.</para>

        <para>In addition, mere aggregation of another work not based on the
        Program with the Program (or with a work based on the Program) on a
        volume of a storage or distribution medium does not bring the other
        work under the scope of this License.</para>
      </sect2>

      <sect2 id="gpl-2-3">
        <title>Section 3</title>

        <para>You may copy and distribute the Program (or a work based on it,
        under <link linkend="gpl-2-2">Section 2 </link> in object code or
        executable form under the terms of <link linkend="gpl-2-1">Sections 1
        </link> and <link linkend="gpl-2-2">2 </link> above provided that you
        also do one of the following: <orderedlist>
            <listitem>
              <para>Accompany it with the complete corresponding
              machine-readable source code, which must be distributed under
              the terms of Sections 1 and 2 above on a medium customarily used
              for software interchange; or,</para>
            </listitem>

            <listitem>
              <para>Accompany it with a written offer, valid for at least
              three years, to give any third party, for a charge no more than
              your cost of physically performing source distribution, a
              complete machine-readable copy of the corresponding source code,
              to be distributed under the terms of Sections 1 and 2 above on a
              medium customarily used for software interchange; or,</para>
            </listitem>

            <listitem>
              <para>Accompany it with the information you received as to the
              offer to distribute corresponding source code. (This alternative
              is allowed only for noncommercial distribution and only if you
              received the program in object code or executable form with such
              an offer, in accord with Subsection b above.)</para>
            </listitem>
          </orderedlist></para>

        <para>The source code for a work means the preferred form of the work
        for making modifications to it. For an executable work, complete
        source code means all the source code for all modules it contains,
        plus any associated interface definition files, plus the scripts used
        to control compilation and installation of the executable. However, as
        a special exception, the source code distributed need not include
        anything that is normally distributed (in either source or binary
        form) with the major components (compiler, kernel, and so on) of the
        operating system on which the executable runs, unless that component
        itself accompanies the executable.</para>

        <para>If distribution of executable or object code is made by offering
        access to copy from a designated place, then offering equivalent
        access to copy the source code from the same place counts as
        distribution of the source code, even though third parties are not
        compelled to copy the source along with the object code.</para>
      </sect2>

      <sect2 id="gpl-2-4">
        <title>Section 4</title>

        <para>You may not copy, modify, sublicense, or distribute the Program
        except as expressly provided under this License. Any attempt otherwise
        to copy, modify, sublicense or distribute the Program is void, and
        will automatically terminate your rights under this License. However,
        parties who have received copies, or rights, from you under this
        License will not have their licenses terminated so long as such
        parties remain in full compliance.</para>
      </sect2>

      <sect2 id="gpl-2-5">
        <title>Section 5</title>

        <para>You are not required to accept this License, since you have not
        signed it. However, nothing else grants you permission to modify or
        distribute the Program or its derivative works. These actions are
        prohibited by law if you do not accept this License. Therefore, by
        modifying or distributing the Program (or any work based on the
        Program), you indicate your acceptance of this License to do so, and
        all its terms and conditions for copying, distributing or modifying
        the Program or works based on it.</para>
      </sect2>

      <sect2 id="gpl-2-6">
        <title>Section 6</title>

        <para>Each time you redistribute the Program (or any work based on the
        Program), the recipient automatically receives a license from the
        original licensor to copy, distribute or modify the Program subject to
        these terms and conditions. You may not impose any further
        restrictions on the recipients' exercise of the rights granted herein.
        You are not responsible for enforcing compliance by third parties to
        this License.</para>
      </sect2>

      <sect2 id="gpl-2-7">
        <title>Section 7</title>

        <para>If, as a consequence of a court judgment or allegation of patent
        infringement or for any other reason (not limited to patent issues),
        conditions are imposed on you (whether by court order, agreement or
        otherwise) that contradict the conditions of this License, they do not
        excuse you from the conditions of this License. If you cannot
        distribute so as to satisfy simultaneously your obligations under this
        License and any other pertinent obligations, then as a consequence you
        may not distribute the Program at all. For example, if a patent
        license would not permit royalty-free redistribution of the Program by
        all those who receive copies directly or indirectly through you, then
        the only way you could satisfy both it and this License would be to
        refrain entirely from distribution of the Program.</para>

        <para>If any portion of this section is held invalid or unenforceable
        under any particular circumstance, the balance of the section is
        intended to apply and the section as a whole is intended to apply in
        other circumstances.</para>

        <para>It is not the purpose of this section to induce you to infringe
        any patents or other property right claims or to contest validity of
        any such claims; this section has the sole purpose of protecting the
        integrity of the free software distribution system, which is
        implemented by public license practices. Many people have made
        generous contributions to the wide range of software distributed
        through that system in reliance on consistent application of that
        system; it is up to the author/donor to decide if he or she is willing
        to distribute software through any other system and a licensee cannot
        impose that choice.</para>

        <para>This section is intended to make thoroughly clear what is
        believed to be a consequence of the rest of this License.</para>
      </sect2>

      <sect2 id="gpl-2-8">
        <title>Section 8</title>

        <para>If the distribution and/or use of the Program is restricted in
        certain countries either by patents or by copyrighted interfaces, the
        original copyright holder who places the Program under this License
        may add an explicit geographical distribution limitation excluding
        those countries, so that distribution is permitted only in or among
        countries not thus excluded. In such case, this License incorporates
        the limitation as if written in the body of this License.</para>
      </sect2>

      <sect2 id="gpl-2-9">
        <title>Section 9</title>

        <para>The Free Software Foundation may publish revised and/or new
        versions of the General Public License from time to time. Such new
        versions will be similar in spirit to the present version, but may
        differ in detail to address new problems or concerns.</para>

        <para>Each version is given a distinguishing version number. If the
        Program specifies a version number of this License which applies to it
        and "any later version", you have the option of following the terms
        and conditions either of that version or of any later version
        published by the Free Software Foundation. If the Program does not
        specify a version number of this License, you may choose any version
        ever published by the Free Software Foundation.</para>
      </sect2>

      <sect2 id="gpl-2-10">
        <title>Section 10</title>

        <para>If you wish to incorporate parts of the Program into other free
        programs whose distribution conditions are different, write to the
        author to ask for permission. For software which is copyrighted by the
        Free Software Foundation, write to the Free Software Foundation; we
        sometimes make exceptions for this. Our decision will be guided by the
        two goals of preserving the free status of all derivatives of our free
        software and of promoting the sharing and reuse of software
        generally.</para>
      </sect2>

      <sect2 id="gpl-2-11">
        <title>NO WARRANTY Section 11</title>

        <para>BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
        WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
        EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
        OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
        KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
        PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME
        THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</para>
      </sect2>

      <sect2 id="gpl-2-12">
        <title>Section 12</title>

        <para>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
        WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
        AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU
        FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
        CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
        PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
        RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
        FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF
        SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
        DAMAGES.</para>

        <para>END OF TERMS AND CONDITIONS</para>
      </sect2>
    </sect1>
  </appendix>
</article>
